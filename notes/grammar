program -> declaration* EOF

declaration -> variable | funDecl | statement

funDecl -> "fun" function ;

function -> IDENTIFIER "(" parameters? ")" block ;

parameters -> IDENTIFIER ( "," IDENTIFIER )* ;

variable -> ("let" | "const") IDENTIFIER ("=" expression)? ";" 

statement -> exprStmt | printStmt | block | ifStmt | whileStmt

forStmt -> "for" "(" (variable | exprStmt | ";")
           expression? ";" expression? ")" statement

whileStmt -> "while" "(" expression ")" statement

ifStmt -> "if" "(" expression ")" statement
          ("else" "if" "(" expression ")" statement)*
          ("else" statement)?

block -> "{" declaretion* "}"

exprStmt -> expression ";"

printStmt -> "print" expression ";"

expression -> assignment

assignment -> IDENTIFIER "=" assignment | ternary

ternary -> logicOr ("?" ternary ":" ternary)? 

logicOr -> logicAnd ("or" logicAnd)*

logicAnd -> equality ("and" equality)*

equality -> comparison (("!=" | "==") comparison)*       

comparisona -> term ((">" | ">=" | "<" | "<=") term)* 

term -> factor (("+" | "-") factor)*

factor -> unary (("*" | "/") unary)* 

unary -> ("-" | "!") unary | call

call -> primary ( "(" args? ")" )*

args -> expression ( "," expression )*

primary -> NUMBER | STRING | IDENTIFIER | "true" | "false" |
           "none" | "(" expression ")"     
